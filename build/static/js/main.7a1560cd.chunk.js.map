{"version":3,"sources":["firebase/firebase.js","Add.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","Add","dataUri","isFullscreen","imageNumber","setDataUri","setStep","setCount","classNameFullscreen","getFileName","blobType","number","width","photoNumber","length","Array","join","extention","IMAGE_TYPES","PNG","JPG","getFileExtention","className","alt","src","onClick","blob","dataURI","byteString","atob","split","mimeString","ab","ArrayBuffer","ia","Uint8Array","i","charCodeAt","Blob","type","dataURItoBlob","file","console","log","uploadTask","storage","ref","child","put","on","TaskEvent","STATE_CHANGED","snapshot","Math","round","bytesTransferred","totalBytes","error","getDownloadURL","then","onTakePhotoAnimationDone","onCameraError","handleCameraError","idealFacingMode","FACING_MODES","ENVIRONMENT","idealResolution","height","imageType","imageCompression","isMaxResolution","isImageMirror","isSilentMode","isDisplayStartCameraError","sizeFactor","App","props","useState","setImageNumber","step","images","setImages","currentImage","setCurrentImage","count","intervalId","setIntervalId","imagesData","useRef","intervalIdData","useEffect","prevImagesData","current","prevIntervalIdData","animation","countImages","imageNum","flip","setInterval","clearInterval","folder","a","storageRef","listRef","listAll","result","promises","items","map","imageItem","Promise","all","urls","fetchImages","image","index","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QAYAA,IAASC,cAVc,CACrBC,OAAQ,0CACRC,WAAY,iCACZC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,gBACnBC,MAAO,6CACPC,cAAe,iBAIFR,QAAf,E,OC+HeS,EArII,SAAC,GAA0E,IAAxEC,EAAuE,EAAvEA,QAASC,EAA8D,EAA9DA,aAAcC,EAAgD,EAAhDA,YAAaC,EAAmC,EAAnCA,WAAYC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,SACzEC,EAAsBL,EAAe,gCAAkC,GAiDrEM,EAAc,SAACL,EAAaM,GAChC,IAjByBC,EAAQC,EAkB3BC,GAlBmBF,EAkBaP,GAjBtCO,GAAkB,IACJG,SAFmBF,EAkBkB,GAf/CD,EACA,IAAII,MAAMH,EAAQD,EAAOG,OAAS,GAAGE,KAAK,KAAOL,GAe/CM,EAZiB,SAACP,GACxB,IAAIO,EAAYC,cAAYC,IAK5B,MAHiB,eAAbT,IACFO,EAAYC,cAAYE,KAEnBH,EAMWI,CAAiBX,GAEnC,MAAM,GAAN,OAJe,QAIf,YAAoBG,EAApB,YAAmCI,IAuCrC,OACE,8BAEGf,EACC,sBAAKoB,UAAU,UAAf,UACE,qBAAKA,UAAW,sBAAwBd,EAAxC,SACE,qBAAKe,IAAI,sBAAsBC,IAAKtB,MAEtC,wBAAQuB,QAhCU,WACxB,IAAIC,EAnDgB,SAACC,GAOrB,IANA,IAAIC,EAAaC,KAAKF,EAAQG,MAAM,KAAK,IAErCC,EAAaJ,EAAQG,MAAM,KAAK,GAAGA,MAAM,KAAK,GAAGA,MAAM,KAAK,GAE5DE,EAAK,IAAIC,YAAYL,EAAWd,QAChCoB,EAAK,IAAIC,WAAWH,GACfI,EAAI,EAAGA,EAAIR,EAAWd,OAAQsB,IACrCF,EAAGE,GAAKR,EAAWS,WAAWD,GAGhC,OADW,IAAIE,KAAK,CAACN,GAAK,CAACO,KAAMR,IAyCtBS,CAActC,GACnBuC,EAAOhC,EAAYL,EAAasB,EAAKa,MAC3CG,QAAQC,IAAIF,GAEZ,IAEMG,EAFUpD,EAASqD,UACEC,MACGC,MAAM,UAAYN,GAAMO,IAAItB,GAE1DkB,EAAWK,GAAGzD,EAASqD,QAAQK,UAAUC,eACvC,SAACC,GACCV,QAAQC,IAAiE,IAA5DU,KAAKC,MAAOF,EAASG,iBAAiBH,EAASI,gBAC5D,SAACC,GACD,MAAMA,KACN,WACAb,EAAWQ,SAASN,IAAIY,iBAAiBC,MAAK,WAC5CtD,EAAW,IACXC,EAAQ,GACRC,EAAS,UAcT,yBACA,wBAAQkB,QA5FK,WACnBiB,QAAQC,IAAI,UACZtC,EAAW,OA0FL,wBAGF,8BACE,cAAC,IAAD,CACEF,aAAcA,EACdyD,yBA7FkB,SAAC1D,GAC3BG,EAAWH,IA6FH2D,cAAkB,SAACJ,IA3GH,SAACA,GACzBf,QAAQC,IAAI,oBAAqBc,GA0GMK,CAAkBL,IACjDM,gBAAmBC,eAAaC,YAChCC,gBAAmB,CAACtD,MAAO,IAAKuD,OAAQ,KACxCC,UAAalD,cAAYE,IACzBiD,iBAAoB,IACpBC,iBAAmB,EACnBC,eAAiB,EACjBC,cAAgB,EAChBC,2BAA6B,EAC7BC,WAAc,SC7BXC,EA3FH,SAACC,GAAW,IAAD,EACSC,mBAAS,IADlB,mBACd3E,EADc,KACLG,EADK,OAEiBwE,mBAAS,GAF1B,mBAEdzE,EAFc,KAED0E,EAFC,OAGGD,mBAAS,GAHZ,mBAGdE,EAHc,KAGRzE,EAHQ,OAIOuE,mBAAS,IAJhB,mBAIdG,EAJc,KAINC,EAJM,OAKmBJ,mBAAS,GAL5B,mBAKdK,EALc,KAKAC,EALA,OAMKN,mBAAS,GANd,mBAMdO,EANc,KAMP7E,EANO,OAOesE,mBAAS,GAPxB,mBAOdQ,EAPc,KAOFC,EAPE,KAQfC,EAAaC,iBAAO,MACpBC,EAAiBD,iBAAO,MAE9BE,qBAAU,WACR,IAAMC,EAAiBJ,EAAWK,QAC5BC,EAAqBJ,EAAeG,QACtCZ,IAAWW,IACbJ,EAAWK,QAAUZ,GAEnBS,IAAmBI,IACrBJ,EAAeG,QAAUP,KAE3B,CAACL,EAAQO,EAAYF,EAAYI,IAEnC,IAKMK,EAAY,SAACC,GACjB,IAAIC,EAAW,EACTC,EAAOC,aAAY,WACnBF,EAAYD,GACdC,IACAb,EAAgBa,KAEhBb,EAAgB,GAChBa,EAAW,KAEZ,MACHG,cAAcV,EAAeG,SAC7BO,cAAcd,GACdC,EAAcW,IAGhBP,qBAAU,YACS,uCAAG,WAAOU,GAAP,mBAAAC,EAAA,6DACZxD,EAAUrD,EAASqD,UACnByD,EAAazD,EAAQC,MACrByD,EAAUD,EAAWvD,MAAMqD,GAHf,SAIZG,EAAQC,UAAU7C,MAAK,SAAA8C,GAC3B,IAAIC,EAAWD,EAAOE,MAAMC,KAAI,SAACC,GAC/B,OAAOA,EAAUnD,oBAEnBoD,QAAQC,IAAIL,GAAU/C,MAAK,SAAAqD,GACzB/B,EAAU+B,GACVzG,EAASyG,EAAKlG,QACdgE,EAAekC,EAAKlG,QACpBgF,EAAUkB,EAAKlG,cAZD,2CAAH,sDAgBjBmG,CAAY,aACX,CAAC7B,IAIJ,OACE,sBAAK9D,UAAS,mBAAcyD,GAA5B,UACE,sBAAKzD,UAAU,OAAf,UACE,qBAAKA,UAAU,YAAf,SACE,wBAAQG,QA/CO,WACrBnB,EAAQ,GACR6F,cAAcV,EAAeG,UA6CvB,8BAEF,qBAAKtE,UAAU,SAAf,SACG0D,EAAO4B,KAAI,SAACM,EAAOC,GAClB,OAAQ,qBAA4B7F,UAAW4D,IAAiBiC,EAAQ,eAAiB,QAAjF,SAA0F,qBAAK5F,IAAI,WAAWD,UAAU,aAAaE,IAAK0F,KAA1I,gBAAmBC,YAIjC,qBAAK7F,UAAU,SAAf,SACI,cAAC,EAAD,CACEpB,QAASA,EACTG,WAAYA,EACZC,QAASA,EACTC,SAAUA,EACVH,YAAaA,EACbD,cArBW,UCzDRiH,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3D,MAAK,YAAkD,IAA/C4D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7a1560cd.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAy0YuPBdXqBiK-VhuOLAq6S-RlrMMBBVk\",\n  authDomain: \"audience-b9551.firebaseapp.com\",\n  projectId: \"audience-b9551\",\n  storageBucket: \"audience-b9551.appspot.com\",\n  messagingSenderId: \"1088787585448\",\n  appId: \"1:1088787585448:web:fd16cf89a1f1349ac6a59d\",\n  measurementId: \"G-0LFC04MLB9\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nexport default firebase;\n  ","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Camera, { FACING_MODES, IMAGE_TYPES } from 'react-html5-camera-photo';\nimport firebase from './firebase/firebase';\nimport './index.css';\nimport 'react-html5-camera-photo/build/css/index.css';\n\nexport const Add = ({ dataUri, isFullscreen, imageNumber, setDataUri, setStep, setCount}) => {\n  let classNameFullscreen = isFullscreen ? 'demo-image-preview-fullscreen' : '';\n\n  const handleCameraError = (error) => {\n    console.log('handleCameraError', error);\n  }\n\n  // const handleCameraStop = () => {\n  //   console.log('handleCameraStop');\n  // }\n\n  const handleCancel = () => {\n    console.log(\"cancel\")\n    setDataUri(null);\n  }\n\n  const handleAnimationDone = (dataUri) => {\n    setDataUri(dataUri);\n  }\n\n  const dataURItoBlob = (dataURI) => {\n    let byteString = atob(dataURI.split(',')[1]);\n  \n    let mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n  \n    let ab = new ArrayBuffer(byteString.length);\n    let ia = new Uint8Array(ab);\n    for (let i = 0; i < byteString.length; i++) {\n      ia[i] = byteString.charCodeAt(i);\n    }\n    let blob = new Blob([ab], {type: mimeString});\n    return blob;\n  }\n  \n  const padWithZeroNumber = (number, width) => {\n    number = number + '';\n    return number.length >= width\n      ? number\n      : new Array(width - number.length + 1).join('0') + number;\n  }\n  \n  const getFileExtention = (blobType) => {\n    let extention = IMAGE_TYPES.PNG;\n  \n    if (blobType === 'image/jpeg') {\n      extention = IMAGE_TYPES.JPG;\n    }\n    return extention;\n  }\n  \n  const getFileName = (imageNumber, blobType) => {\n    const prefix = 'photo';\n    const photoNumber = padWithZeroNumber(imageNumber, 4);\n    const extention = getFileExtention(blobType);\n  \n    return `${prefix}-${photoNumber}.${extention}`;\n  }\n  \n  // const downloadImageFileFomBlob = (blob, imageNumber) => {\n  //   window.URL = window.webkitURL || window.URL;\n  \n  //   let anchor = document.createElement('a');\n  //   anchor.download = getFileName(imageNumber, blob.type);\n  //   anchor.href = window.URL.createObjectURL(blob);\n  //   let mouseEvent = document.createEvent('MouseEvents');\n  //   mouseEvent.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 0, null);\n  //   anchor.dispatchEvent(mouseEvent);\n  // }\n\n\n  const downloadImageFile = () => {\n    let blob = dataURItoBlob(dataUri);\n    const file = getFileName(imageNumber, blob.type);\n    console.log(file)\n\n    const storage = firebase.storage();\n    const storageRef = storage.ref();\n    const uploadTask = storageRef.child('folder/' + file).put(blob);\n\n    uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED,\n      (snapshot) =>{\n        console.log( Math.round((snapshot.bytesTransferred/snapshot.totalBytes))*100 );\n      },(error) =>{\n        throw error\n      },() =>{\n        uploadTask.snapshot.ref.getDownloadURL().then(() =>{\n          setDataUri('');\n          setStep(0);\n          setCount(0);\n        })\n    }\n  ) \n  }\n\n  return (\n    <div>\n    {\n      (dataUri) ? (\n        <div className=\"preview\">\n          <div className={'demo-image-preview ' + classNameFullscreen}>\n            <img alt=\"your portrait, mate\" src={dataUri} />\n          </div>\n          <button onClick={downloadImageFile}>Looks good.</button>\n          <button onClick={handleCancel}>Retake!</button>\n        </div>\n      ) : (\n        <div>\n          <Camera\n            isFullscreen={isFullscreen}\n            onTakePhotoAnimationDone = { handleAnimationDone }\n            onCameraError = { (error) => { handleCameraError(error); } }\n            idealFacingMode = {FACING_MODES.ENVIRONMENT}\n            idealResolution = {{width: 600, height: 900}}\n            imageType = {IMAGE_TYPES.JPG}\n            imageCompression = {0.97}\n            isMaxResolution = {false}\n            isImageMirror = {false}\n            isSilentMode = {false}\n            isDisplayStartCameraError = {true}\n            sizeFactor = {1}\n          />\n        </div>\n      )\n    }\n    </div>\n  );\n};\n\nAdd.propTypes = {\n  dataUri: PropTypes.string,\n  isFullscreen: PropTypes.bool\n};\n\nexport default Add;","import React, { useState, useEffect, useRef} from 'react';\nimport 'react-html5-camera-photo/build/css/index.css';\nimport './app.sass';\nimport Add from './Add';\nimport firebase from './firebase/firebase';\n\nconst App = (props) => {\n  const [dataUri, setDataUri] = useState('');\n  const [imageNumber, setImageNumber] = useState(0);\n  const [step, setStep] = useState(0);\n  const [images, setImages] = useState([]);\n  const [currentImage, setCurrentImage] = useState(0);\n  const [count, setCount] = useState(0);\n  const [intervalId, setIntervalId] = useState(0);\n  const imagesData = useRef(null);\n  const intervalIdData = useRef(null);\n\n  useEffect(() => {\n    const prevImagesData = imagesData.current;\n    const prevIntervalIdData = intervalIdData.current;\n    if (images !== prevImagesData) {\n      imagesData.current = images;\n    }\n    if (intervalIdData !== prevIntervalIdData) {\n      intervalIdData.current = intervalId;\n    }\n  },[images, imagesData, intervalId, intervalIdData]);\n\n  const handleAddPhoto = () => {\n    setStep(1);\n    clearInterval(intervalIdData.current);\n  }\n\n  const animation = (countImages) => {\n    let imageNum = 0;\n    const flip = setInterval(() => {\n      if (imageNum < (countImages)) {\n        imageNum++;\n        setCurrentImage(imageNum);\n      } else {\n        setCurrentImage(0);\n        imageNum = 0;\n      }\n    }, 1600);\n    clearInterval(intervalIdData.current);\n    clearInterval(intervalId);\n    setIntervalId(flip);\n  };\n\n  useEffect(() => {\n    const fetchImages = async (folder) => {\n      const storage = firebase.storage();\n      const storageRef = storage.ref();\n      const listRef = storageRef.child(folder);\n      await listRef.listAll().then(result => {\n        let promises = result.items.map((imageItem) => {\n          return imageItem.getDownloadURL();\n        });\n        Promise.all(promises).then(urls => {\n          setImages(urls);\n          setCount(urls.length);\n          setImageNumber(urls.length);\n          animation(urls.length);\n        });\n      });\n    }\n    fetchImages('folder/');\n  }, [count])\n\n  const isFullscreen = false;\n\n  return (\n    <div className={`app step-${step}`}>\n      <div className=\"flip\">\n        <div className=\"addbutton\">\n          <button onClick={handleAddPhoto}>Add your photo</button>\n        </div>\n        <div className=\"frames\">\n          {images.map((image, index) => {\n            return (<div key={`image-${index}`} className={currentImage === index ? \"frame active\" : \"frame\"}><img alt=\"portrait\" className=\"frameImage\" src={image} /></div>);\n          })}\n        </div>\n      </div>\n      <div className=\"camera\">\n          <Add\n            dataUri={dataUri}\n            setDataUri={setDataUri}\n            setStep={setStep}\n            setCount={setCount}\n            imageNumber={imageNumber}\n            isFullscreen={isFullscreen}\n          />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}